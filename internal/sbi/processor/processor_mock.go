// Code generated by MockGen. DO NOT EDIT.
// Source: internal/sbi/processor/processor.go
//
// Generated by this command:
//
//	mockgen -source=internal/sbi/processor/processor.go -package=processor
//
// Package processor is a generated GoMock package.
package processor

import (
	context "github.com/andy89923/nf-example/internal/context"
	factory "github.com/andy89923/nf-example/pkg/factory"
	gomock "go.uber.org/mock/gomock"
	reflect "reflect"
)

// MockProcessorNf is a mock of ProcessorNf interface.
type MockProcessorNf struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorNfMockRecorder
}

// MockProcessorNfMockRecorder is the mock recorder for MockProcessorNf.
type MockProcessorNfMockRecorder struct {
	mock *MockProcessorNf
}

// NewMockProcessorNf creates a new mock instance.
func NewMockProcessorNf(ctrl *gomock.Controller) *MockProcessorNf {
	mock := &MockProcessorNf{ctrl: ctrl}
	mock.recorder = &MockProcessorNfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessorNf) EXPECT() *MockProcessorNfMockRecorder {
	return m.recorder
}

// Config mocks base method.
func (m *MockProcessorNf) Config() *factory.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*factory.Config)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockProcessorNfMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockProcessorNf)(nil).Config))
}

// Context mocks base method.
func (m *MockProcessorNf) Context() *context.NFContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(*context.NFContext)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockProcessorNfMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockProcessorNf)(nil).Context))
}

// Processor mocks base method.
func (m *MockProcessorNf) Processor() *Processor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Processor")
	ret0, _ := ret[0].(*Processor)
	return ret0
}

// Processor indicates an expected call of Processor.
func (mr *MockProcessorNfMockRecorder) Processor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Processor", reflect.TypeOf((*MockProcessorNf)(nil).Processor))
}

// SetLogEnable mocks base method.
func (m *MockProcessorNf) SetLogEnable(enable bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLogEnable", enable)
}

// SetLogEnable indicates an expected call of SetLogEnable.
func (mr *MockProcessorNfMockRecorder) SetLogEnable(enable any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogEnable", reflect.TypeOf((*MockProcessorNf)(nil).SetLogEnable), enable)
}

// SetLogLevel mocks base method.
func (m *MockProcessorNf) SetLogLevel(level string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLogLevel", level)
}

// SetLogLevel indicates an expected call of SetLogLevel.
func (mr *MockProcessorNfMockRecorder) SetLogLevel(level any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogLevel", reflect.TypeOf((*MockProcessorNf)(nil).SetLogLevel), level)
}

// SetReportCaller mocks base method.
func (m *MockProcessorNf) SetReportCaller(reportCaller bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetReportCaller", reportCaller)
}

// SetReportCaller indicates an expected call of SetReportCaller.
func (mr *MockProcessorNfMockRecorder) SetReportCaller(reportCaller any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReportCaller", reflect.TypeOf((*MockProcessorNf)(nil).SetReportCaller), reportCaller)
}

// Start mocks base method.
func (m *MockProcessorNf) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockProcessorNfMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockProcessorNf)(nil).Start))
}

// Terminate mocks base method.
func (m *MockProcessorNf) Terminate() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Terminate")
}

// Terminate indicates an expected call of Terminate.
func (mr *MockProcessorNfMockRecorder) Terminate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Terminate", reflect.TypeOf((*MockProcessorNf)(nil).Terminate))
}
